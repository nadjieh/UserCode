 RawFiltering: applies singletop selection and save the output in RAW format to rerun the HLT menu afterward.

 TriggerObjectMonitoring: takes a HLT path and plots the basic properties of the trigger objects.
 Trigger objects are taken only from the last active module in the path.
 Trigger objects are recognized looking at their id which is equal to pdgId.
 To run and compile, the code needs DQM/Physics and HLTrigger/HLTcore packages (see the instruction).
 It is not yet possible to show the DQM histograms on the local GUI since the local GUI is configured to present the TopDQM structure (see e.g. https://twiki.cern.ch/twiki/bin/viewauth/CMS/TWikiTopQuarkComWG4Operations). I know nothing about GUI configuration technicalities.

 Instruction for TriggerObjectMonitoring under a CMSSW/src directory:
 cvs co -r  V00-03-15  DQM/Physics
 cvs co -r  V02-10-14  HLTrigger/HLTcore
 cvs co -r  VHLT-00-01 UserCode/Nadjieh/TriggerStudy/TriggerObjectMonitoring
 cp UserCode/Nadjieh/TriggerStudy/TriggerObjectMonitoring/src/*     DQM/Physics/src/
 cp UserCode/Nadjieh/TriggerStudy/TriggerObjectMonitoring/plugins/* DQM/Physics/plugins/
 cp UserCode/Nadjieh/TriggerStudy/TriggerObjectMonitoring/python/*  DQM/Physics/python/
 cp UserCode/Nadjieh/TriggerStudy/TriggerObjectMonitoring/test/*    DQM/Physics/test/
 rm -rf UserCode
 cmsenv
 scram b
 cd DQM/Physics/test
 
 In topDQM_production_HLT_(PU_)cfg.py change the GlobalTag and input file appropriately:
 cmsRun topDQM_production_HLT_(PU_)cfg.py

 In topDQM_harvesting_HLT.py puth the name of the outpufile from the last step as input:
 cmsRun topDQM_harvesting_HLT.py

 Check the histograms in jet or vertex (PU) multiplicities.




